@*@using System*@
@using System
@using System.Collections.Generic
@using FormFactory.Attributes
@using System.Linq
@using FormFactory.Attributes
@using FormFactory
@model PropertyVm


@if (!Model.Readonly && Model.Choices != null)
{
    var choices = Model.Choices as IEnumerable<Tuple<string, string>>;
    if (choices == null && Model.Choices is IEnumerable<string>)
    {
        choices = Model.Choices.Cast<string>().Select(c => Tuple.Create(c, c));
    }
    if (Model.GetCustomAttributes().OfType<RadioAttribute>().Any())
    {
        foreach (var option in choices)
        {
            var isSelected = Model.Value != null && option.Item2 == Model.Value.ToString();
            <div class="radio">
                <label>
                    <input type="radio" name="@Model.Name" value="@option.Item2" @Html.Raw(isSelected ? "checked" : "")>
                    @option.Item1
                </label>
            </div>
        }
    }
    else
    {
        <select name="@Model.Name" class="form-control" @Html.Raw(Model.Readonly()) @Html.Raw(Model.Disabled())>
            @foreach (var option in choices)
            {
                bool isSelected = Model.Value != null && option.Item2 == Model.Value.ToString();
                <option value="@option.Item2" selected="@isSelected">@option.Item1</option>            
            }
        </select>
    }
}
else
{
    var dataAttributes = Model.GetCustomAttributes();
    var inputType = dataAttributes.Any(da => da is PasswordAttribute) ? "password" : "text";
    var placeHolderText = Model.GetCustomAttributes().OfType<FormFactory.Attributes.DisplayAttribute>().Select(a => a.Prompt).FirstOrDefault();

    var suggestionsAttribute = Model.GetCustomAttributes().OfType<SuggestionsUrlAttribute>().SingleOrDefault();
    var needsAutoComplete = (!Model.Readonly && (suggestionsAttribute != null || (Model.Suggestions != null && Model.Suggestions.Cast<object>().Any())));
    var autoCompleteAtt = "";
    if (needsAutoComplete)
    {
        if (suggestionsAttribute != null)
        {
            autoCompleteAtt = "data-provide='ajax-typeahead' autocomplete='off' data-link='" + suggestionsAttribute.Url + "'";
        }
        else
        {
            var suggestions = Model.Suggestions.Cast<string>();
            var escapedSuggestions = "\"" + string.Join("\", \"", suggestions.Select(a => a.Replace("\"", "\"\""))) + "\"";
            autoCompleteAtt = "data-provide='typeahead' autocomplete='off' data-source='[" + escapedSuggestions + "]'";
        }
    }


    if (dataAttributes.Any(x => x is MultilineTextAttribute))
    {
        <textarea class="form-control" @Html.Raw(Model.Readonly()) @Html.Raw(autoCompleteAtt) @Html.Raw(Model.Disabled()) @Html.UnobtrusiveValidation(Model) @Html.Raw(placeHolderText.Attr("placeholder")) name="@Model.Name" rows="5">@Model.Value</textarea>
    }
    else
    {
        <input class="form-control" @Html.Raw(Model.Readonly()) @Html.Raw(autoCompleteAtt) @Html.Raw(Model.Disabled()) @Html.Raw(placeHolderText.Attr("placeholder")) @Html.UnobtrusiveValidation(Model) name="@Model.Name" size="30" type="@inputType" value="@Model.Value"/>
    }

}
