@using System
@using FormFactory.Attributes
@using System.Linq
@using System.Net
@using System.Reflection
@using System.Web.Caching
@using FormFactory
@using FormFactory.AspMvc
@using FormFactory.AspMvc.Example.Controllers
@using FormFactory.AspMvc.Example.Models
@using FormFactory.AspMvc.Example.Models.Examples
@using FormFactory.Attributes;
@{
    ViewBag.Title = "FormFactory Examples";
}
<header class="jumbotron masthead">
    <div class="inner">
        <h1>FormFactory</h1>
        <p>
            The ASP.NET MVC html form builder
        </p>
        <p class="download-info">
            <a href="https://github.com/mcintyre321/FormFactory" class="btn btn-primary btn-large">View project on GitHub</a>
        </p>
    </div>
</header>
<div class="marketing">
    <div class="row">
        <div class="col-md-3">
            <h4>Reflection form generation</h4>
            <p>
                Because you shouldn't have to update your html when you update your object model
            </p>
        </div>
        <div class="col-md-3">
            <h4>Convention based rendering</h4>
            <p>
                Specify custom templates for rendering different object types.
            </p>
        </div>
        <div class="col-md-3">
            <h4>Twitter bootstrap support</h4>
            <p>
                Styled for bootstrap (by default)
            </p>
        </div>
        <div class="col-md-3">
            <h4>Embeddable</h4>
            <p>
                FormFactory.Standalone can be used in non ASP projects like console apps, services or WebAPI projects.
            </p>
        </div>

    </div>
    <!--/row-->

</div>
<section id="documentation">
    <div class="row">
        <div class="col-md-6">
            <h3>What is it?</h3>
            <p>
                FormFactory renders complex object forms automatically. It refects over an object model or method signature,
                and builds an intermediate model representing the form and properties. These models are then rendered
                using customisable templates.
            </p>
            <p>
                FormFactory can build complex nested forms with rich content pickers. By following a few simple code conventions,
                properties with multiple choices and suggested values can be written in a few lines of code.
            </p>
        </div>
        <div class="col-md-6">
            <h3>How to use it</h3>
            <pre class="prettyprint">
//In a cshtml file
@@FF.PropertiesFor(someObject).Render(Html);
            </pre>
        </div>
    </div>
    <div class="page-header">
        <h2>Installation <small></small></h2>
    </div>

    <div class="row">
        <div class="col-md-6">
            <h3>1. Install the library</h3>
            <pre>
<u>For ASP.NET MVC 5</u>
install-package FormFactory
install-package FormFactory.AspMvc
install-package EmbeddedResourceVirtualPathProvider *
            
<u>For ASP.NET MVC Core</u>
install-package FormFactory
install-package FormFactory.AspNetCore
Then configure core to serve embedded files (<a href="https://github.com/mcintyre321/FormFactory/blob/master/FormFactory.AspNetCore.Example/Startup.cs#L36"> see startup.cs lines 36 and 60)</a>
</pre>
            * You can install <a href="https://www.nuget.org/packages/FormFactory.Templates/">FormFactory.Templates</a> if you don't want to use the <a href="https://github.com/mcintyre321/EmbeddedResourceVirtualPathProvider">EmbeddedResourceVirtualPathProvider</a>

            <h3>2. Add the assets to your page</h3>
            <pre class="prettyprint">
&lt;link href="/Content/FormFactory/FormFactory.css" rel="stylesheet" type="text/css"/>
&lt;script src="/Scripts/FormFactory/FormFactory.js" type="text/javascript">&lt;/script></pre>
        </div>
    </div>
         
    <!-- /row -->
    <!-- /row -->

</section>
<h1 class="page-header">
    Rendering objects
</h1>
@{
    var ex = typeof(NestedFormsExample);
    var exampleTypes = ex.Assembly.GetTypes()
        .Where(t => t.Namespace == ex.Namespace && t.Name.Contains("Example"))
        .OrderBy(t => t.Name);
}
@foreach (var type in exampleTypes)
{
    <div class="row">
        <div class="col-md-12">
            <h3>@type.Name.Sentencise(true).Replace("Examples", "").Replace("Example", "")</h3>

        </div>
    </div>
    <div class="row">

        <div class="col-md-4">


            <form action="/home/save" method="POST">
                @{
                    var instance = Activator.CreateInstance(type);
                    if (string.IsNullOrWhiteSpace(Request.Params["UseStandalone"]))
                    {

                        @(FF.PropertiesFor(instance).Render(Html))
                    }
                }
                <input type="submit" value="submit" />
            </form>
        </div>
        <div class="col-md-8">
            <p>In @(type.Name).cs</p>
            <pre class="prettyprint">
@{
    var html = Cache[type.Name + ".cs"] as string;
    if (html == null)
    {
        var address = "https://raw.github.com/mcintyre321/FormFactory/master/FormFactory.AspMvc.Example/Models/Examples/" + type.Name + ".cs";
        try
        {
            html = new WebClient()
                .DownloadString(address);
            html = string.Join(Environment.NewLine, html.Split(Environment.NewLine.ToCharArray()).Where(line => line.Trim().StartsWith("using ") == false));
            Cache[type.Name + ".cs"] = html;
        }
        catch (Exception)
        {
            html = "Could not get source from " + address;
        }
    }
    @html
}
</pre>
        </div>
    </div>

    }

<div class="row">
    <div class="col-md-6">
        <h2>Form for MVC action:</h2>

        <p>
            Given this action...

            <pre class="prettyprint">
    [HttpPost] public virtual ActionResult SignIn(string email, [Password] string password)
        { //... } 
</pre>
        </p>
        <p>
            ..writing this in the view...
            <pre class="prettyprint"> 
        var form = Html.FormForAction((HomeController c, string p0, string p1) => c.SignIn(p0, p1));
        @@form.Render(Html); //renders the form
    </pre>
        </p>

    </div>
    <div class="span1">&nbsp;</div>
    <div class="col-md-5">
        <p>...will render this form:</p>
        @{

            var form = Html.FormForAction((HomeController c, string p0, string p1) => c.SignIn(p0, p1));
            @form.Render(Html);
        }
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <h2>Programatically created form</h2>

        <p>
            By default FF reflects against a view model to produce a `PropertyVm[]` array, but you can also create the properties programatically, e.g. you could load a form definition from a database<br />
            You can build any of the examples above.

            <pre class="prettyprint">
//Build a model up in your controller or view   
var formModel = new[]
            {
                    new PropertyVm(typeof(DateTime) , "date")
                    {
                        DisplayName = "Your birthday",
                        NotOptional =true,
                        GetCustomAttributes = () => new object[] { new DateAttribute() }
                    },
                    new PropertyVm(typeof(string) , "textmessage")
                    {
                        DisplayName = "Type a message:",
                        NotOptional =false,
                        GetCustomAttributes = () => new object[] { new MultilineTextAttribute(),  new DisplayAttribute(){Prompt = "placeholder??"}, new DisplayAttribute(Description = "Type anything here.")  },
                    },
                     new PropertyVm(typeof(string) , "number")
                    {
                        DisplayName = "Select a number",
                        NotOptional =false,
                        Choices = new List<string>() {"one","two","three","four" },
                    },
                    new PropertyVm(typeof(string), "username")
                    {
                        DisplayName = "Username",
                        NotOptional = true,
                        Suggestions = new List<string>() { "holy poo" },
                    },
                    new PropertyVm(typeof(string), "password")
                    {
                        DisplayName = "Password",
                        NotOptional = true,
                        GetCustomAttributes = () => new object[]{ new PasswordAttribute() }
                    },
                    new PropertyVm(typeof(string), "os")
                    {
                        DisplayName = "Operating System",
                        NotOptional = true,
                        Choices = new List<string>() {"OSX", "IOS", "Windows", "Android"},
                        Value = "Windows", //Preselect windows
                        GetCustomAttributes = () => new object[] {new RadioAttribute(), new System.ComponentModel.DescriptionAttribute("Make a choice above.") }
                     },
                    new PropertyVm(typeof(bool), "check")
                    {
                        DisplayName = "Check if happy",
                        NotOptional = true,
                        Value = false, //Preselect false (unchecked)
                        GetCustomAttributes = () => new object[] {new FormFactory.Attributes.LabelOnRightAttribute() } // right label
                     },
                    new PropertyVm(typeof(bool), "check2")
                    {
                        DisplayName = "Check if sad",
                        Value = false, //Preselect false (unchecked)
                        NotOptional =true

                     }
              };
	    
...
//render it in your view
@@formModel.Render(Html)            </pre>
        </p>

    </div>
    <div class="span1">&nbsp;</div>
    <div class="col-md-5">
        <p>...will render this form:</p>
        @{

            var formModel = new[]
            {
                    new PropertyVm(typeof(DateTime) , "date")
                    {
                        DisplayName = "Your birthday",
                        NotOptional =true,
                        GetCustomAttributes = () => new object[] { new DateAttribute() }
                    },
                    new PropertyVm(typeof(string) , "textmessage")
                    {
                        DisplayName = "Type a message:",
                        NotOptional =false,
                        GetCustomAttributes = () => new object[] { new MultilineTextAttribute(),  new DisplayAttribute() { Prompt = "placeholder??" }, new System.ComponentModel.DescriptionAttribute("Type anything here.")  },
                    },
                     new PropertyVm(typeof(string) , "number")
                    {
                        DisplayName = "Select a number",
                        NotOptional =false,
                        Choices = new List<string>() {"one","two","three","four" },
                    },
                    new PropertyVm(typeof(string), "username")
                    {
                        DisplayName = "Username",
                        NotOptional = true,
                        Suggestions = new List<string>() { "holy poo" },
                    },
                    new PropertyVm(typeof(string), "password")
                    {
                        DisplayName = "Password",
                        NotOptional = true,
                        GetCustomAttributes = () => new object[]{ new PasswordAttribute() }
                    },
                    new PropertyVm(typeof(string), "os")
                    {
                        DisplayName = "Operating System",
                        NotOptional = true,
                        Choices = new List<string>() {"OSX", "IOS", "Windows", "Android"},
                        Value = "Windows", //Preselect windows
                        GetCustomAttributes = () => new object[] {new RadioAttribute(), new System.ComponentModel.DescriptionAttribute("Make a choice above.") }
                     },
                    new PropertyVm(typeof(bool), "check")
                    {
                        DisplayName = "Check if happy",
                        NotOptional = true,
                        Value = false, //Preselect false (unchecked)
                        GetCustomAttributes = () => new object[] {new FormFactory.Attributes.LabelOnRightAttribute() } // right label
                     },
                    new PropertyVm(typeof(bool), "check2")
                    {
                        DisplayName = "Check if sad",
                        Value = false, //Preselect false (unchecked)
                        NotOptional =true

                    },new PropertyVm(typeof(object) , "Things")
                    {
                        DisplayName = "Pick a thing",
                        NotOptional =true,
                        Choices = new List<object>
                        {
                            new PropertyVm(typeof(string) , "ThingOne")
                            {
                                IsHidden = true,
                                DisplayName = "Thing One"
                            },
                            new PropertyVm(typeof(string) , "ThingTwo")
                            {
                                IsHidden = true,
                                DisplayName = "Thing Two"
                            },
                        }
                    }
              };

            @formModel.Render(Html)
        }
    </div>
</div>
